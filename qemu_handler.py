import subprocess


def help():
    help = """Common problems: CPU missing features ...:  View -> Details -> CPU -> Check 'Copy Host Configuration'

    """
    print(help)

#! TODO add pargs functionality to fix some of this (this might already be better though)
def get_commands(command = None, name=None, snapname=None, destpath=None):
    ''' Returns a command string to be executed such as: Snapshot, Suspend, Start, Stop, Revert'''
    commands = {
        "list":"list --name --all",
        "list_all":"list --all",
        "list_running":"list --name --state-running",
        "list_paused":"list --name --state-paused",
        "list_off":"list --name --state-shutoff",
        "snap_save":"snapshot-save {name} --snapshotname {snapname}".format(name=name,snapname=snapname),
        "snap_revert":"snapshot-revert {name} --snapshotname {snapname}".format(name=name,snapname=snapname),
        "snap_list":"snapshot-list {name}".format(name=name),
        "snap_create":"snapshot-create-as --domain {name} --name {snapname}".format(name=name,snapname=snapname),
        "screenshot":"screenshot {name} --file {destpath}",
        "start":"start {name}",
        "reboot":"reboot {name}",
        "restore":"", # restore state to running or paused
        "resume":"resume {name}", # Resumes a VM from a suspended state
        "suspend":"suspend {name}", # Suspends a VM
        "reset":"reset {name}",  # Like hitting the physicial reset button
        "shutdown":"",
        "memdump":"dump {name} --memory-only {destpath}", #"virsh dump win7 --memory-only /tmp/memout.dmp"

        "":""
        }

    if command.lower() == "help":
        return commands.keys()

    cmd = "virsh {}".format(commands[command])
    return cmd
    


def run_command(command):
    """ Executes a command and returns the output as (stdout,stderr). meant to be used with get_commands()"""
    print(command)
    c = subprocess.Popen(command,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    out,err = c.communicate()
    return (out,err)


# run_command(get_commands("list"))