import csv

network_keys = ["TCP", "UDP", "HTTP"]
registry_keys = ["RegCreateKey","RegSetValue","RegDeleteValue"]
filesystem_keys = ["CreateFile", "WriteFile"]
process_keys = ["Process"]
hosts = []
all_keys = network_keys + registry_keys + filesystem_keys + process_keys

def procmon_dump(cfile):
    report = open(cfile, 'r')
    reader = csv.reader(report)
    # Time, Process, PID, Operation, Path, Result, Detail
    for row in reader:
        time,proc,pid,op,path,result,detail=\
            row[0],row[1],row[2],row[3],row[4],row[5],row[6]
        if any(item in row[3] for item in network_keys):
            nets.append("{0}\t{1}:{2} {3}".format(op,proc,pid,path))
        if any(item in row[3] for item in registry_keys):
            regs.append("{0}\t{1}:{2} {3}".format(op,proc,pid,path))
        if any(item in row[3] for item in filesystem_keys):
            files.append("{0}\t{1}:{2} {3}".format(op,proc,pid,path))
        if any(item in row[3] for item in process_keys):
            processes.append("{0}\t{1}:{2} {3}".format(op,proc,pid,path))
    report.close()

    return nets,regs,files,processes


def pid_dump(cfile):
    processes= {}
    report = open(cfile, 'r')
    reader = csv.reader(report)
    # Time, Process, PID, Operation, Path, Result, Detail
    for row in reader:
        time,proc,pid,op,path,result,detail=\
            row[0],row[1],row[2],row[3],row[4],row[5],row[6]
        if "PID" not in row[2]:
            if any(item in row[3] for item in all_keys):
                if processes.has_key(row[2]+":"+row[1]):
                    if "{0}\t {1}\t{2}".format(op,path,result) not in processes[row[2]+":"+row[1]]:
                        processes[row[2]+":"+row[1]].append("{0}\t {1}\t{2}".format(op,path,result))
                else:
                    processes[row[2]+":"+row[1]] =["{0}\t {1}\t{2}".format(op,path,result)]
    report.close()
    return processes

