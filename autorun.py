#!/usr/bin/python

#import subprocess
import qemu_handler as qh 
from agent_server import * 
from argparse import ArgumentParser
# from ConfigParser import ConfigParser

# Need to make a config file or gather info from questions

# Test command
# cmd = qh.get_commands(command = "snap_list",name="win7")
# print(cmd)
# a,b = qh.run_command(cmd)

# # Revert VM to base snapshot
# cmd = qh.get_commands(command = "snap_revert",name="win7", snapname="base")
# out,err = qh.run_command(cmd)

# # Start VM (if not started)
# # Get VM state later
# cmd = qh.get_commands(command = "start",name="win7")
# out,err = qh.run_command(cmd)


def begin_autorun(imagename, snapname):
    cmd = qh.get_commands(command = "snap_revert",name=imagename, snapname=snapname)
    out,err = qh.run_command(cmd)
    print(out.decode())
    print(err.decode())

    cmd = qh.get_commands(command = "start",name=imagename)
    out,err = qh.run_command(cmd)
    print(out.decode())
    print(err.decode())



def main():
    # config = ConfigParser()
    parser = ArgumentParser()
    # parser.add_argument("-C", "--config", help="Path to the config file", required=False)
    # parser.add_argument("-m", "--memory", help="Perform routing memory analysis", action="store_true", required=False)
    parser.add_argument("-t", "--runtime", help="Time to allow malware to execute", required=False, type=int, default=60)
    parser.add_argument("-i", "--imagename", help="Name of the Qemu image", required=False, default="win7")
    parser.add_argument("-s", "--snapname", help="Name of the Qemu image snapshot", required=False, default="base")

    parser.add_argument("-b", "--binary", required=True,
                        help="Binary to execute (auto executes a binary from setupfiles on the target)")
    parser.add_argument("-p", "--malpath", help="Local directory containing malware",  required=True)
    parser.add_argument("-r", "--remotepath", help="Remote directory to upload malware",  required=False, default="C:\\Windows\\Temp\\")


    args = parser.parse_args()
    imagename = args.imagename
    snapname = args.snapname
    localmaldir = args.malpath
    windst = args.remotepath
    runtime = args.runtime
    binary = args.binary

    begin_autorun(imagename,snapname)

    start = Server()

    start.imagename = imagename
    start.snapname = snapname
    start.localmaldir = localmaldir
    start.executable = binary
    start.windst = windst
    start.runtime = runtime


    host = "0.0.0.0"
    port = 8080

    print("Listening for connection")
    start.connect(host,port,autorun=True)



main()